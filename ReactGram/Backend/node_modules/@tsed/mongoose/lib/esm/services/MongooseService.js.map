{"version":3,"file":"MongooseService.js","sourceRoot":"","sources":["../../../src/services/MongooseService.ts"],"names":[],"mappings":";AAAA,OAAO,EAAC,MAAM,EAAE,UAAU,EAAC,MAAM,UAAU,CAAC;AAC5C,OAAO,EAAC,MAAM,EAAC,MAAM,cAAc,CAAC;AACpC,OAAO,QAAQ,MAAM,UAAU,CAAC;AAGhC,uBAAuB;AACvB,SAAS,SAAS,CAAC,CAAM;IACvB,OAAO,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9C,CAAC;AAGD,IAAa,eAAe,GAA5B,MAAa,eAAe;IACjB,WAAW,GAAqC,IAAI,GAAG,EAAE,CAAC;IAC3D,iBAAiB,GAAW,SAAS,CAAC;IAG9C,MAAM,CAAS;IAEf;;;OAGG;IACH,KAAK,CAAC,OAAO,CAAC,EAAU,EAAE,GAAW,EAAE,iBAAiC,EAAE,SAAS,GAAG,KAAK;QACzF,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;YAChB,OAAO,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,CAAE,CAAC;SAC5B;QAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,8BAA8B,EAAE,EAAE,CAAC,CAAC;QACrD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,GAAG,EAAE,CAAC,CAAC;QACjC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,YAAY,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;QAEnE,IAAI;YACF,MAAM,UAAU,GAAG,MAAM,SAAS,CAAC,QAAQ,CAAC,gBAAgB,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC,CAAC;YACtF,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;YAErC,IAAI,EAAE,KAAK,SAAS,IAAI,SAAS,EAAE;gBACjC,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;aAC7B;YAED,OAAO,UAAU,CAAC;SACnB;QAAC,OAAO,EAAE,EAAE;YACX,0BAA0B;YAC1B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;gBAChB,KAAK,EAAE,wBAAwB;gBAC/B,UAAU,EAAE,EAAE,CAAC,IAAI;gBACnB,OAAO,EAAE,EAAE,CAAC,OAAO;gBACnB,KAAK,EAAE,EAAE,CAAC,KAAK;aAChB,CAAC,CAAC;YACH,0BAA0B;YAC1B,OAAO,CAAC,IAAI,EAAE,CAAC;SAChB;IACH,CAAC;IAED;;;OAGG;IACH,GAAG,CAAC,EAAW;QACb,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,IAAI,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAC5D,CAAC;IAED;;;;OAIG;IACH,GAAG,CAAC,EAAW;QACb,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,IAAI,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAC5D,CAAC;IAED,KAAK,CAAC,gBAAgB;QACpB,KAAK,MAAM,CAAC,EAAE,EAAE,UAAU,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,EAAE;YACzD,MAAM,UAAU,CAAC,KAAK,EAAE,CAAC;YACzB,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;SAC7B;IACH,CAAC;CACF,CAAA;AA5DC;IADC,MAAM,EAAE;8BACD,MAAM;+CAAC;AALJ,eAAe;IAD3B,UAAU,EAAE;GACA,eAAe,CAiE3B;SAjEY,eAAe","sourcesContent":["import {Inject, Injectable} from \"@tsed/di\";\nimport {Logger} from \"@tsed/logger\";\nimport Mongoose from \"mongoose\";\nimport {ConnectOptions} from \"mongoose\";\n\n// istanbul ignore next\nfunction asPromise(c: any) {\n  return c && c.asPromise ? c.asPromise() : c;\n}\n\n@Injectable()\nexport class MongooseService {\n  readonly connections: Map<string, Mongoose.Connection> = new Map();\n  private defaultConnection: string = \"default\";\n\n  @Inject()\n  logger: Logger;\n\n  /**\n   *\n   * @returns {Promise<\"mongoose\".Connection>}\n   */\n  async connect(id: string, url: string, connectionOptions: ConnectOptions, isDefault = false): Promise<any> {\n    if (this.has(id)) {\n      return await this.get(id)!;\n    }\n\n    this.logger.info(`Connect to mongo database: ${id}`);\n    this.logger.debug(`Url: ${url}`);\n    this.logger.debug(`options: ${JSON.stringify(connectionOptions)}`);\n\n    try {\n      const connection = await asPromise(Mongoose.createConnection(url, connectionOptions));\n      this.connections.set(id, connection);\n\n      if (id === \"default\" || isDefault) {\n        this.defaultConnection = id;\n      }\n\n      return connection;\n    } catch (er) {\n      /* istanbul ignore next */\n      this.logger.error({\n        event: \"MONGO_CONNECTION_ERROR\",\n        error_name: er.name,\n        message: er.message,\n        stack: er.stack\n      });\n      /* istanbul ignore next */\n      process.exit();\n    }\n  }\n\n  /**\n   *\n   * @returns {\"mongoose\".Connection}\n   */\n  get(id?: string): Mongoose.Connection | undefined {\n    return this.connections.get(id || this.defaultConnection);\n  }\n\n  /**\n   *\n   * @param {string} id\n   * @returns {boolean}\n   */\n  has(id?: string): boolean {\n    return this.connections.has(id || this.defaultConnection);\n  }\n\n  async closeConnections() {\n    for (const [id, connection] of this.connections.entries()) {\n      await connection.close();\n      this.connections.delete(id);\n    }\n  }\n}\n"]}