{"version":3,"file":"MongooseSchemaOptions.js","sourceRoot":"","sources":["../../../src/interfaces/MongooseSchemaOptions.ts"],"names":[],"mappings":"","sourcesContent":["import {Schema, SchemaOptions} from \"mongoose\";\nimport {MongooseDocument} from \"./MongooseDocument\";\n\nexport type MongooseNextCB = (err?: Error) => void;\n\nexport interface MongooseHookOptions {\n  document?: boolean;\n  query?: boolean;\n  parallel?: boolean;\n}\n\nexport type MongooseHookPromised<T = any> = (doc: T | MongooseDocument<T>) => Promise<void> | void;\n\nexport type MongoosePreHookCB<T = any> = ((doc: T | MongooseDocument<T>, next: MongooseNextCB) => void) | MongooseHookPromised;\n\nexport type MongoosePostHookCB<T = any> =\n  | ((doc: T | MongooseDocument<T>, error: Error, next: MongooseNextCB) => void)\n  | ((doc: T | MongooseDocument<T>, error: Error) => Promise<void> | void)\n  | ((doc: T | MongooseDocument<T>, next: MongooseNextCB) => void)\n  | MongooseHookPromised;\n\nexport interface MongoosePreHook<T = any> {\n  method: string | RegExp;\n  fn: MongoosePreHookCB<T>;\n  options?: MongooseHookOptions;\n}\n\nexport interface MongoosePostHook<T = any> {\n  method: string | RegExp;\n  fn: MongoosePostHookCB<T>;\n  options?: MongooseHookOptions;\n}\n\nexport interface MongoosePluginOptions {\n  plugin: (schema: Schema, options?: any) => void;\n  options?: Record<string, unknown>;\n}\n\nexport interface MongooseIndexOptions {\n  fields: Record<any, any>;\n  options?: Record<string, unknown>;\n}\n\nexport interface MongooseSchemaOptions {\n  schemaOptions?: SchemaOptions;\n  plugins?: MongoosePluginOptions[];\n  indexes?: MongooseIndexOptions[];\n  pre?: MongoosePreHook[];\n  post?: MongoosePostHook[];\n}\n"]}