{"version":3,"file":"createModel.js","sourceRoot":"","sources":["../../../src/utils/createModel.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,MAAM,EAAE,KAAK,EAAO,MAAM,YAAY,CAAC;AAC/C,OAAO,EAAC,eAAe,EAAC,MAAM,cAAc,CAAC;AAC7C,OAAO,QAAsB,MAAM,UAAU,CAAC;AAC9C,OAAO,EAAC,cAAc,EAAE,mBAAmB,EAAC,MAAM,wBAAwB,CAAC;AAC3E,OAAO,EAAC,cAAc,EAAC,MAAM,8BAA8B,CAAC;AAC5D,OAAO,EAAC,cAAc,EAAC,MAAM,gBAAgB,CAAC;AAE9C,MAAM,UAAU,aAAa,CAAC,MAAiB,EAAE,OAAY;IAC3D,MAAM,EAAC,cAAc,EAAE,KAAK,EAAC,GAAG,cAAc,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAEhE,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,mBAAmB,EAAE,cAAc,CAAC,CAAC;IAC5D,cAAc,CAAC,GAAG,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;IAE3C,OAAO,EAAC,KAAK,EAAE,cAAc,EAAC,CAAC;AACjC,CAAC;AAED;;;;;;;;;;GAUG;AACH,MAAM,UAAU,WAAW,CACzB,MAAW,EACX,MAAuB,EACvB,OAAe,MAAM,CAAC,MAAM,CAAC,EAC7B,UAAmB,EACnB,eAAyB,EACzB,UAAuB;IAEvB,MAAM,MAAM,GAAG,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAE5C,IAAI,MAAM,CAAC,oBAAoB,EAAE;QAC/B,MAAM,iBAAiB,GAAG,MAAM,CAAC,qBAAsB,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,eAAe,CAAC,MAAM,CAAE,CAAC;QACxG,MAAM,aAAa,GAAG,MAAM,CAAC,qBAAsB,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QAExE,2EAA2E;QAC3E,OAAO,aAAa,CAAC,cAAc,EAAE,CAAC,iBAAiB,CAAC,IAAI,aAAa,CAAC,aAAa,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC;KACpH;IAED,MAAM,IAAI,GAAG,eAAe,CAAC,CAAC,CAAC,EAAC,eAAe,EAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IAC7D,MAAM,CAAC,GAAG,UAAU,IAAI,QAAQ,CAAC;IAEjC,MAAM,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;IACtD,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;IAE9C,OAAO,KAAK,CAAC;AACf,CAAC","sourcesContent":["import {nameOf, Store, Type} from \"@tsed/core\";\nimport {JsonEntityStore} from \"@tsed/schema\";\nimport mongoose, {Connection} from \"mongoose\";\nimport {MONGOOSE_MODEL, MONGOOSE_MODEL_NAME} from \"../constants/constants\";\nimport {MongooseModels} from \"../registries/MongooseModels\";\nimport {getSchemaToken} from \"./createSchema\";\n\nexport function getModelToken(target: Type<any>, options: any) {\n  const {collectionName, token} = getSchemaToken(target, options);\n\n  Store.from(target).set(MONGOOSE_MODEL_NAME, collectionName);\n  MongooseModels.set(collectionName, target);\n\n  return {token, collectionName};\n}\n\n/**\n * Create an instance of mongoose.model from a class.\n *\n * @param {Type<any>} target Class attached to the schema and model.\n * @param {\"mongoose\".Schema} schema Schema that will be attached to the model.\n * @param name model name\n * @param collection (optional, induced from model name)\n * @param overwriteModels\n * @param connection\n * @returns {Model<T extends Document>}\n */\nexport function createModel<T>(\n  target: any,\n  schema: mongoose.Schema,\n  name: string = nameOf(target),\n  collection?: string,\n  overwriteModels?: boolean,\n  connection?: Connection\n) {\n  const entity = JsonEntityStore.from(target);\n\n  if (entity.isDiscriminatorChild) {\n    const discriminatorName = entity.discriminatorAncestor!.schema.discriminator().getDefaultValue(target)!;\n    const ancestorModel = entity.discriminatorAncestor!.get(MONGOOSE_MODEL);\n\n    // check if discriminator is already registered on model before creating it\n    return ancestorModel.discriminators?.[discriminatorName] || ancestorModel.discriminator(discriminatorName, schema);\n  }\n\n  const opts = overwriteModels ? {overwriteModels} : undefined;\n  const c = connection || mongoose;\n\n  const model = c.model(name, schema, collection, opts);\n  Store.from(target).set(MONGOOSE_MODEL, model);\n\n  return model;\n}\n"]}